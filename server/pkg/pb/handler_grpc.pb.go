// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/pb/handler.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dummycd_AddRepository_FullMethodName               = "/pb.dummycd/AddRepository"
	Dummycd_DeleteRepository_FullMethodName            = "/pb.dummycd/DeleteRepository"
	Dummycd_AddOrUpdateApplication_FullMethodName      = "/pb.dummycd/AddOrUpdateApplication"
	Dummycd_DeleteApplication_FullMethodName           = "/pb.dummycd/DeleteApplication"
	Dummycd_GetApplications_FullMethodName             = "/pb.dummycd/GetApplications"
	Dummycd_GetApplicationRevisions_FullMethodName     = "/pb.dummycd/GetApplicationRevisions"
	Dummycd_CheckoutApplicationRevision_FullMethodName = "/pb.dummycd/CheckoutApplicationRevision"
)

// DummycdClient is the client API for Dummycd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummycdClient interface {
	AddRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Empty, error)
	DeleteRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Empty, error)
	AddOrUpdateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Empty, error)
	DeleteApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Empty, error)
	GetApplications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Applications, error)
	GetApplicationRevisions(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Revisions, error)
	CheckoutApplicationRevision(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Empty, error)
}

type dummycdClient struct {
	cc grpc.ClientConnInterface
}

func NewDummycdClient(cc grpc.ClientConnInterface) DummycdClient {
	return &dummycdClient{cc}
}

func (c *dummycdClient) AddRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dummycd_AddRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummycdClient) DeleteRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dummycd_DeleteRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummycdClient) AddOrUpdateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dummycd_AddOrUpdateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummycdClient) DeleteApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dummycd_DeleteApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummycdClient) GetApplications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, Dummycd_GetApplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummycdClient) GetApplicationRevisions(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Revisions, error) {
	out := new(Revisions)
	err := c.cc.Invoke(ctx, Dummycd_GetApplicationRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummycdClient) CheckoutApplicationRevision(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dummycd_CheckoutApplicationRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DummycdServer is the server API for Dummycd service.
// All implementations must embed UnimplementedDummycdServer
// for forward compatibility
type DummycdServer interface {
	AddRepository(context.Context, *Repository) (*Empty, error)
	DeleteRepository(context.Context, *Repository) (*Empty, error)
	AddOrUpdateApplication(context.Context, *Application) (*Empty, error)
	DeleteApplication(context.Context, *Application) (*Empty, error)
	GetApplications(context.Context, *Empty) (*Applications, error)
	GetApplicationRevisions(context.Context, *Application) (*Revisions, error)
	CheckoutApplicationRevision(context.Context, *Application) (*Empty, error)
	mustEmbedUnimplementedDummycdServer()
}

// UnimplementedDummycdServer must be embedded to have forward compatible implementations.
type UnimplementedDummycdServer struct {
}

func (UnimplementedDummycdServer) AddRepository(context.Context, *Repository) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRepository not implemented")
}
func (UnimplementedDummycdServer) DeleteRepository(context.Context, *Repository) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedDummycdServer) AddOrUpdateApplication(context.Context, *Application) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateApplication not implemented")
}
func (UnimplementedDummycdServer) DeleteApplication(context.Context, *Application) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedDummycdServer) GetApplications(context.Context, *Empty) (*Applications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedDummycdServer) GetApplicationRevisions(context.Context, *Application) (*Revisions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationRevisions not implemented")
}
func (UnimplementedDummycdServer) CheckoutApplicationRevision(context.Context, *Application) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutApplicationRevision not implemented")
}
func (UnimplementedDummycdServer) mustEmbedUnimplementedDummycdServer() {}

// UnsafeDummycdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummycdServer will
// result in compilation errors.
type UnsafeDummycdServer interface {
	mustEmbedUnimplementedDummycdServer()
}

func RegisterDummycdServer(s grpc.ServiceRegistrar, srv DummycdServer) {
	s.RegisterService(&Dummycd_ServiceDesc, srv)
}

func _Dummycd_AddRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).AddRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_AddRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).AddRepository(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummycd_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).DeleteRepository(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummycd_AddOrUpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).AddOrUpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_AddOrUpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).AddOrUpdateApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummycd_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).DeleteApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummycd_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_GetApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).GetApplications(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummycd_GetApplicationRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).GetApplicationRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_GetApplicationRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).GetApplicationRevisions(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummycd_CheckoutApplicationRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummycdServer).CheckoutApplicationRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummycd_CheckoutApplicationRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummycdServer).CheckoutApplicationRevision(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

// Dummycd_ServiceDesc is the grpc.ServiceDesc for Dummycd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dummycd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.dummycd",
	HandlerType: (*DummycdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRepository",
			Handler:    _Dummycd_AddRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _Dummycd_DeleteRepository_Handler,
		},
		{
			MethodName: "AddOrUpdateApplication",
			Handler:    _Dummycd_AddOrUpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _Dummycd_DeleteApplication_Handler,
		},
		{
			MethodName: "GetApplications",
			Handler:    _Dummycd_GetApplications_Handler,
		},
		{
			MethodName: "GetApplicationRevisions",
			Handler:    _Dummycd_GetApplicationRevisions_Handler,
		},
		{
			MethodName: "CheckoutApplicationRevision",
			Handler:    _Dummycd_CheckoutApplicationRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/handler.proto",
}
